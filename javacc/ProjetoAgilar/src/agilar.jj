options {
  STATIC = false;
  DEBUG_LOOKAHEAD = false;

}

PARSER_BEGIN(RestLang)

import java.io.*;

public class RestLang {
    final static String Version = "RestLang";
    boolean Menosshort = false;


      public  static void main(String args[]) throws ParseException
      {
        String filename = ""; // nome do arquivo a ser analisado
        RestLang parser;     // analisador l?xico/sint?tico
        int i;
        boolean ms = false;

        System.out.println(Version);
        // l? os par?metros passados para o compilador
        for (i = 0; i < args.length - 1; i++)
        {
            if ( args[i].toLowerCase().equals("-short") )
              ms = true;
            else
                {
                   System.out.println("Usage is: java RestLang [-short] inputfile");
                   System.exit(0);
                }
        }

        if (args[i].equals("-"))
        {       // l? da entrada padr?o
            System.out.println("Reading from standard input . . .");
            parser = new RestLang(System.in);
         }
         else
        {       // l? do arquivo
            filename = args[args.length-1];
            System.out.println("Reading from file " + filename + " . . .");
            try {
                parser = new RestLang(new java.io.FileInputStream(filename));
            }
        catch (java.io.FileNotFoundException e) {
                   System.out.println("File " + filename + " not found.");
            return;
            }
        }
        parser.Menosshort = ms;
        parser.program();
        if ( parser.token_source.foundLexError() != 0 ) // verifica se houve erro l?xico
            System.out.println(parser.token_source.foundLexError() + " Lexical Errors found");
        else
            System.out.println("Program successfully analyzed.");
    }  // main

    static public String im(int x)
    {
    int k;
    String s;
       s = tokenImage[x];
       k = s.lastIndexOf("\"");
       try {s = s.substring(1,k);}
       catch (StringIndexOutOfBoundsException e)
       {}
       return s;
    }

}  // RestLang

PARSER_END(RestLang)

TOKEN_MGR_DECLS :
{
int countLexError = 0;

public int foundLexError()
{
   return countLexError;
}

}


/* Espa?os a serem desprezados no in?cio de cada token */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

SKIP :
{
  "/*" : multilinecomment
}

SKIP :
{
  "//" : singlelinecomment
}

<multilinecomment> SKIP:
{
   "*/" : DEFAULT
|  <~[]>
}

<singlelinecomment> SKIP:
{
   <["\n","\r"]> : DEFAULT
|   <~[]>
}


/* Palavras reservadas */

TOKEN :
{
  < BREAK: "break" > 
| < CLASS: "class" >
| < CONSTRUCTOR: "constructor" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FOR: "for" >
| < IF: "if" >
| < INT: "int" >
| < NEW: "new" >
| < PRINT: "print" >
| < READ: "read" >
| < RETURN: "return" >
| < STRING: "string" >
| < SUPER: "super" >
}

/* Query */

TOKEN :
{
  < FROM: "from" >
| < JOIN: "join" >
| < ON: "on" >
| < WHERE: "where" >
| < ORDER: "order by" >
| < BY: "by" >
| < AS: "as" >
}

/* constantes */

TOKEN :
{
  < int_constant:(  // n?meros decimais, octais, hexadecimais ou bin?rios
                  (["0"-"9"] (["0"-"9"])* ) | 
                  (["0"-"7"] (["0"-"7"])* ["o", "O"] ) |
                  (["0"-"9"] (["0"-"7","A"-"F","a"-"f"])* ["h", "H"] ) |
                  (["0"-"1"] (["0"-"1"])* ["b", "B"])
                 ) >
|
  < string_constant:    // constante string como "abcd bcda"
      "\""( ~["\"","\n","\r"])* "\"" >
|
  < null_constant: "null" > // constante null
}

/* Identificadores */

TOKEN :
{
  < UNDERSCORE: "_" >
|
  < IDENT: (<LETTER>|<UNDERSCORE>) (<LETTER>|<DIGIT>|<UNDERSCORE>)* >
|
  < #LETTER:["A"-"Z","a"-"z"] >
|
  < #DIGIT:["0"-"9"] >
}

/* S?mbolos especiais */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* Operadores */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NEQ: "!=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < REM: "%" >
}

/* Trata os erros l?xicos */
SPECIAL_TOKEN :
{
<INVALID_LEXICAL: 
(~ ["a"-"z", "A"-"Z",
  "0"-"9",
  "\"",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  ";",
  ",",
  ".",
  "=",
  ">",
  "<",
  "!",
  "+",
  "-",
  "*",
  "/",
  "%",
  " ",
  "\t",
  "\n",
  "\r",
  "\f"
])+>
   {
    System.err.println("Line " + input_stream.getEndLine() + 
                           " - Invalid string found: " + image);
    countLexError++;
   }
|
   <INVALID_CONST: 
   "\"" (~ ["\n","\r","\""])* ["\n","\r"]>
   {
    System.err.println("Line " + input_stream.getEndLine() + 
                           " - String constant has a \\n: " + image);
    countLexError++;
   }

}


void program():
 {}
 {
    [ classdecl() ] <EOF>
  }


void classdecl():
{}
{
    <CLASS> <IDENT> classbody()
}

void classbody():
{}
{
    <LBRACE>
        [classdecl()]
        [vardecl()]

    <RBRACE>
}

void vardecl():
{}
{
    ( (<INT> | <STRING> | <IDENT>)
       <IDENT>
       (<COMMA> <IDENT>)*
       [<SEMICOLON>]
    )+
}

JAVACODE void mostra_tokens()
{
Token t;
    do
    {
    t = getNextToken();
    Token st = t;
        while ( st.specialToken != null)
        st = st.specialToken;
        do {
           if ( Menosshort )
          System.out.println(st.image + "  " + 
                                 im(st.kind) + " " +
                                 st.kind);
           else
              System.out.println("Line: " + st.beginLine + 
                                 " Column: " + st.beginColumn + 
                                 " " + st.image +
                                 "  " + im(st.kind) + "  "+t.kind);
          st = st.next;       
        } while (st != t.next);
    } while (t.kind != RestLangConstants.EOF);  
}
