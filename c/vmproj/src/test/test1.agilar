module agilar.std;interface/*    Lee -> The Samurai Programing Language    1. Módulos, tipos e funções são a base da linguagem agilar    2. Função é formada por 3 partes:        assinatura : nome do identificador seguido por parâmetros entre parenteses        contrato : depois do símbolo -> diz o que a função retorna        execução : entre os {} implementa a função    3. Um módulo é onde as coisas são declaradas e tudo pertence a um módulo    4. Ao usar um módulo, se não estiver ainda carregado, será o feito no primeiro uso, podendo ser explicitamente        carregado com a instrução import    5. Um módulo não precisa ser importado por outros módulos pois o seu uso já é um auto import/load    6. Tipos básicos:        atoms -> um literal como foo ou bar sem valor intrísico, apenas o identificador em questão        /* integers */        int     -> inteiro        1       -> inteiro 1        1..10   -> inteiros de 1 ao 10        /* char */        char    -> caracter        /* string */        string  -> string        /* list */        []      -> lista vazia        [h|t]   -> lista com duas partes para iterar, cabeçalho e calda        [item : string]  -> lista representando pelo identificador item        /* tuple ou struct */        {}  -> tuple        {ok, cor } = {ok, blue};        /* maps */        #{} -> maps        #{%user{id = 1, _}}        /* enum */    7. Operadores especiais        |   -> representa or        ..  -> representa intervalor como 0..1        ->  -> define algo como sendo    8. Keywords especiais        extern  -> função declarada em outra linguagem*//* atoms */ok -> atom;error -> atom;einvalid_mime_type -> atom;true -> 1;false -> 0;bool -> true | false/* Código retorno app */exit_code_t -> enum{    success = 0,    failed = 1};/* Define dia da semana */dia_t -> 1..31;mes_t -> 1..12ano_t -> non_neg_integerdia_semana_t -> @{ segunda, terca, quarta, quinta, sexta, sabado, domingo };date_t -> %{ dia_t, mes_t, ano_t };/* entry proint */main([args : string]) -> exit_code_t;/* retorna dia da semana por extenso */get_semana_extenso(dia_semana : dia_semana_t) -> string;is_valid_content_type(content_type : string) -> bool;get_current_date() -> date_t;mime_type(extensao : string) -> {ok, string} | {error, einvalid_mime_type};/* get current user */user_t -> {id : int,           nome : string,           endereo : string};get_current_user() -> user_t;/* allow_ip_address */ip_t -> {non_neg_integer, non_neg_integer, non_neg_integer, non_neg_integer};allow_ip_address(ip : ip_t,  ipsWhiteList : [ip_t]) -> bool;implementation/* get_semana_extenso */get_semana_extenso(dia_semana : dia_semana_t) -> string;get_semana_extenso(segunda) -> "segunda";get_semana_extenso(terca) -> "terca";get_semana_extenso(quarta) -> "quarta";get_semana_extenso(quinta) -> "quinta";get_semana_extenso(sexta) -> "sexta";get_semana_extenso(sabado) -> "sabado";get_semana_extenso(domingo) -> "domingo";/* is_valid_content_type */is_valid_content_type(content_type : string) -> bool;is_valid_content_type("text/html") -> true;is_valid_content_type("application/json") -> true;is_valid_content_type("application/json;charset=utf-8") -> true;is_valid_content_type(_) -> false./* mime_type */mime_type(extensao : string) -> {ok, string} | {error, einvalid_mime_type};mime_type(".html") -> {ok, "text/html"};mime_type(".json") -> {ok, "application/json"};mime_type(".css") -> {ok, "text/css"};mime_type(_) -> {error, einvalid_mime_type}./* allow_ip_address */ip_t -> {non_neg_integer, non_neg_integer, non_neg_integer, non_neg_integer};allow_ip_address(ip : ip_t,  ipsWhiteList : [ip_t]) -> bool;allow_ip_address(_, []) -> false;allow_ip_address({127, 0, _, _}, _) -> true;allow_ip_address(ip, [h|t]) when ip == t -> true;allow_ip_address(ip, [_|t]) -> match_ip_address(ip, t)./* main */main([args : string]) -> exit_code_t;main([]) ->    io:format("Informe pelo menos 1 parâmetro!");    return exit_code_t.failed;main(args) ->    for (s : args) {        io:format("Parâmetro %d: %s", s.index, s);    };    return exit_code_t.sucess./* is_number */is_number(str : string) -> bool;is_number("") -> false;is_number(str) -> [ch || ch <- str, ch < 0 or ch > 9] == []./* get home dir */get_home_dir() -> string;get_home_dir() ->	case application.get_environment("home") of	    {ok, Path} -> Path;	    _ -> ""	end./* get current user */get_current_user() -> user_t;get_current_user() ->    user = user_t{        id = 1,        nome = "Everton de Vargas Agilar",        endereco = "Rua Casemiro Abreu"    };    return user./* read_file_all */read_file_all(fileName : string) -> {ok, string} | {error, einvalid_file};read_file_all(fileName) ->    case file:readFileAll(fileName) of        {ok, content} -> {ok, content};        {error, _} -> {error, einvalid_file}    end./* to_upper_case */to_upper_case(s : string) -> string;to_upper_case(s) -> to_upper_case_tail(s, []);to_upper_case_tail(s : string, result : string) -> string;to_upper_case_tail([], result) -> result;to_upper_case_tail([h|t], result) -> to_upper_case_tail(t, [result | to_upper(h)]).