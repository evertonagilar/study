module agenda.contatos;

public class Endereco {

    public cidade -> string;
    let cidade = "".

    public logradouro -> string;
    let logradouro = "".

    public init() -> Endereco;
    init() -> %Endereco{}.
}

public class Pessoa{
    public nome -> string;
    let nome = "".

    public id -> int;
    let id = null;

    public endereco -> Endereco;
    let endereco = %Endereco{}.

    public init() -> Pessoa;
    init() -> %Pessoa{}.
}


public class Contato extends Pessoa {
    import agilar.io;

    public telefone -> string;
    let telefone = "";

    init() -> Pessoa;
    init() -> %Contato{endereco = %Endereco{}}.

    public imprimeContato() -> void;
    imprimeContato() ->
        io:format("Dados do contato");
        io:println("Nome: this.nome");
        io:println("Endereco: this.endereco.logradouro");
        io:println("Telefone: this.telefone").

}


public class ContatoRepository{
    import agilar.io;

    private lista -> [Contato];
    let lista = [];

    public init() -> ContatoRepository;
    init() -> %ContatoRepository{}.

    public findById(id : int) -> Contato;
    findById(null) -> null;
    findById(id) > findByIdTail(id, this.lista).

    private findByIdTail(id : int, lista : [Contato]) -> [Contato];
    findByIdTail(_, []) -> null;
    findByIdTail(id, [contato|contatoTail]) when id == contato.id -> contato;
    findByIdTail(id, [_|contatoTail]) -> findByIdTail(id, contatoTail).

    public insert(contato : Contato) -> {ok, success} | {error, elimite_agenda_atingido | econtato_duplicado};
    insert(_) when this.lista.length > 100 -> {error, elimite_agenda_atingido};
    insert(%Contato{id = Id}) when this.findById(Id) != null -> {error, econtato_duplicado};
    insert(contato) ->
        let this.lista = [this.lista | contato];
        {ok, success}.

    public remove(contato : Contato) -> {ok, success};
    remove(%Contato{id = Id}) ->
        let this.lista = [ c || c <- this.lista, c.id != Id ];
        {ok, success}.
}

